<?xml version="1.0" encoding="utf-8"?>
<xsl:stylesheet xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns="http://www.tei-c.org/ns/1.0"
    xmlns:tei="http://www.tei-c.org/ns/1.0" xmlns:m="http://www.w3.org/1998/Math/MathML"
    exclude-result-prefixes="tei xs m" version="2.0" xmlns:html="http://www.w3.org/1999/xhtml"
    xpath-default-namespace="http://www.w3.org/1999/xhtml">
    <xsl:import href="common/common_makeTEIStructure.xsl"/>
    <xsl:import href="common/functions.xsl"/>

    <!--  1-31-18  Template tested successfully on font attributes and notes. It strips out all numbered styles named "font". It converts all style attributes: italic, smallcaps, sup, sub, underline. It keeps all @@ codes and note numbers, but removes all coding from them.  -->
    <!--   2-3-18 Modify td template to include checks for @colspan and @rowspan and add their values to @cols and @rows.  -->
    <!--   2-4-18 Change italic, bold, small-cap templates from 'value-of select' to 'apply-templates.' When there was a sup or sub child within italics, it was getting stripped out with 'value-of select="."'. Using 'apply-templates' included the child elements. NB: 'value-of' computes only the text in an element. Can use 'copy' to produce a copy of the context node. -->
    <!--    3-7-18 change all font attributes to @rend, instead of @style. Added combination templates: italic+smallcaps; bold+smallcaps; bold+italic. -->
    <!--    3-10-18 corrected transforms for italics: @@@ combinations, with and without a number, with and without <sup>; same for italics @@ combinations. Wrote successful transform for regular-font <sup>@@n</sup>. The regular @@<sup>n</sup> is proving harder to hit without span codes for italics to identify.  -->
    <!--    5-20-18 removed all bold formatting. It confuses Python in identifying entry terms. And it's inconsistent.-->
    <!--    5-21-18 remove h1, h2, h3, etc., and convert to <p> tag. AFR is too inconsistent with it. -->

    <xsl:output method="xml" indent="no"/>
    <xsl:strip-space elements="*"/>

    <xsl:template match="/">
        <xsl:apply-templates/>
    </xsl:template>

    <!-- Create TEI document structure TEI -->
    <xsl:template match="html">
        <TEI>
            <xsl:apply-templates/>
        </TEI>
    </xsl:template>

    <!-- Names body element -->
    <xsl:template match="body">
        <xsl:call-template name="convertStructure"/>
    </xsl:template>

    <!-- Insert the teiheader fields-->
    <xsl:template match="head">
        <teiHeader>
            <fileDesc>
                <titleStmt>
                    <title>
                        <xsl:value-of select="title"/>
                    </title>
                    <author>
                        <xsl:value-of select="meta[@name = 'dc.Creator']/@content"/>
                    </author>
                </titleStmt>
                <publicationStmt>
                    <p/>
                </publicationStmt>
                <sourceDesc>
                    <p>transformed from HTML to TEI by eb-html2tei</p>
                </sourceDesc>
            </fileDesc>
        </teiHeader>
    </xsl:template>

    <!--   Bring over heads and convert -->
    <!--    <xsl:template match="h1 | h2 | h3 | h4 | h5 | h6 | h7">
        <HEAD level="{substring(local-name(),2,1)}">
            <xsl:apply-templates select="@*"/>
            <xsl:apply-templates/>
        </HEAD>
    </xsl:template>-->
    <!--    strip out head coding -->
    <xsl:template match="h1 | h2 | h3 | h4 | h5 | h6 | h7">
        <p>
            <xsl:apply-templates/>
        </p>
    </xsl:template>

    <!-- convert br tags -->
    <xsl:template match="br">
        <lb/>
    </xsl:template>

    <!-- eliminate empty div tags? -->
    <xsl:template match="div">
        <xsl:choose>
            <xsl:when test="text() and not(*)">
                <p>
                    <xsl:apply-templates/>
                </p>
            </xsl:when>
            <xsl:otherwise>
                <xsl:apply-templates/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>

    <!--eliminate contents of autogenerated divs -->
    <xsl:template match="div[contains(@class, ' autogenerated')]"/>

    <!-- eliminate contents of link tag in header -->
    <xsl:template match="link"> </xsl:template>

    <!-- eliminate contents of meta tags in header-->
    <xsl:template match="meta"> </xsl:template>

    <!-- Bring over text -->
    <xsl:template match="p">
        <p>
            <xsl:apply-templates select="* | @* | text() | comment()"/>
        </p>
    </xsl:template>

    <!-- convert italics -->
    <!--    options for 3@'s, follwed by 2@'s, then the default.-->
    <xsl:template match="span[@style = 'font-style:italic;']" priority="3.0">
        <xsl:choose>
            <xsl:when test="sup[matches(., '@@@')]">
                <xsl:text>@@@</xsl:text>
                <hi rend="italic">
                    <xsl:value-of select="substring-after(., sup)"/>
                </hi>
            </xsl:when>
            <xsl:when test="matches(., '@@@[0-9]')">
                <xsl:text>@@@</xsl:text>
                <hi rend="italic">
                    <xsl:text> </xsl:text>
                    <xsl:value-of select="substring-after(., ' ')"/>
                </hi>
            </xsl:when>
            <xsl:when test="matches(., '@@@\s')">
                <xsl:text>@@@</xsl:text>
                <hi rend="italic">
                    <xsl:value-of select="substring-after(., '@@@')"/>
                </hi>
            </xsl:when>
            <xsl:when test="sup[matches(., '@@')]">
                <hi rend="italic">
                    <xsl:value-of select="substring-before(., sup)"/>
                </hi>
                <xsl:text>@@</xsl:text>
                <hi rend="italic">
                    <xsl:value-of select="substring-after(., sup)"/>
                </hi>
            </xsl:when>
            <xsl:when test="matches(., '@@')">
                <hi rend="italic">
                    <xsl:value-of select="substring-before(., '@@')"/>
                </hi>
                <xsl:text>@@</xsl:text>
                <hi rend="italic">
                    <xsl:value-of select="substring-after(., '@@')"/>
                </hi>
            </xsl:when>
            <xsl:otherwise>
                <hi rend="italic">
                    <xsl:apply-templates/>
                </hi>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>

    <!-- convert sup tags -->
    <xsl:template match="sup">
        <xsl:choose>
            <xsl:when test="matches(., '@@@')">
                <xsl:text>@@@</xsl:text>
            </xsl:when>
            <xsl:when test="matches(., '@@')">
                <xsl:text>@@</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <hi rend="sup">
                    <xsl:apply-templates/>
                </hi>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <!--
    <!-\-    Strip # from unformatted @@@ -\->
    <xsl:template match="span[matches(., '@@@[0-9]')]">
        <xsl:text>@@@ </xsl:text>
        <xsl:value-of select="substring-after(., ' ')"/>
    </xsl:template>-->

    <!-- convert sub tags -->
    <xsl:template match="sub">
        <xsl:choose>
            <xsl:when test="matches(., '@')">
                <xsl:value-of select="."/>
            </xsl:when>
            <xsl:otherwise>
                <hi rend="sub">
                    <xsl:apply-templates/>
                </hi>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>

    <!-- convert underlines -->
    <xsl:template match="span[@style = 'text-decoration:underline;']">
        <hi rend="underline">
            <xsl:apply-templates/>
        </hi>
    </xsl:template>

    <!--    convert small-caps-->
    <xsl:template match="span[@style = 'font-variant:small-caps;']">
        <hi rend="smallcaps">
            <xsl:apply-templates/>
        </hi>
    </xsl:template>

    <!--    eliminate bold -->
    <xsl:template match="span[@style = 'font-weight:bold;']">
        <xsl:apply-templates/>
    </xsl:template>

    <!--    convert italics+small-caps -->
    <xsl:template match="span[@style = 'font-style:italic;font-variant:small-caps;']">
        <hi rend="italic">
            <hi rend="smallcaps">
                <xsl:apply-templates/>
            </hi>
        </hi>
    </xsl:template>

    <!--    convert bold+small-caps to small-caps-->
    <xsl:template match="span[@style = 'font-weight:bold;font-variant:small-caps;']">
        <hi rend="smallcaps">
            <xsl:apply-templates/>
        </hi>
    </xsl:template>

    <!--    convert bold+italics to italics -->
    <xsl:template match="span[@style = 'font-weight:bold;font-style:italic;']">
        <hi rend="italic">
            <xsl:apply-templates/>
        </hi>
    </xsl:template>

    <!--convert tables-->
    <xsl:template match="table">
        <table>
            <xsl:apply-templates select="@* | * | text()"/>
        </table>
    </xsl:template>

    <!--strip out typography attributes from tables -->
    <xsl:template
        match="table/@align | table/@border | table/@cellpadding | table/@cellspacing | table/@width"/>

    <!--convert table rows and headings-->
    <xsl:template match="tr">
        <row>
            <xsl:if test="parent::thead">
                <xsl:attribute name="role">label</xsl:attribute>
            </xsl:if>
            <xsl:apply-templates select="@* | * | text()"/>
        </row>
    </xsl:template>

    <!--convert table cells-->
    <xsl:template match="td">
        <cell>
            <xsl:if test="@colspan">
                <xsl:attribute name="cols" select="@colspan"/>
            </xsl:if>
            <xsl:if test="@rowspan">
                <xsl:attribute name="rows" select="@rowspan"/>
            </xsl:if>
            <xsl:apply-templates/>
        </cell>
    </xsl:template>

</xsl:stylesheet>
